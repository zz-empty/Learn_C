#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 链表节点结构
typedef struct Node {
    int digit;
    struct Node *next;
} Node;

// 大整数结构
typedef struct {
    int sign;   // 1正数 -1负数
    Node *head;   // 个位在链表头
} BigInt;

// 创建新节点
Node* create_node(int digit) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->digit = digit;
    new_node->next = NULL;
    return new_node;
}

// 反转链表
Node* reverse_list(Node *head) {
    Node *pre = NULL, *cur = head, *next = NULL;
    while (cur) {
        next = cur->next;   // 保存下一个节点
        cur->next = pre;    // 将当前节点头插
        pre = cur;
        cur = next;         // 处理下一个节点
    }
    return pre;
}

// 比较两个大整数的绝对值大小
int compare_abs(Node *a, Node *b) {
    // 计算长度
    int len_a = 0, len_b = 0;
    Node *pa = a, *pb = b;
    while (pa && ++len_a) pa = pa->next;
    while (pb && ++len_b) pb = pb->next;    

    // 长度不相等
    if (len_a != len_b) return len_a > len_b ? 1 : -1;

    // 反转链表，挨个比较高位
    Node *rev_a = reverse_list(a);
    Node *rev_b = reverse_list(b);
    int result = 0;
    pa = rev_a;
    pb = rev_b;
    
    while (pa && pb) {
        if (pa->digit > pb->digit) {
            result = 1;
            break;
        } else if (pa->digit < pb->digit) {
            result = -1; 
            break;
        }
        pa = pa->next;
        pb = pb->next;
    }

    // 恢复原链表
    reverse_list(rev_a);
    reverse_list(rev_b);
    return result;
}

void free_list(Node *head) {
    while (head) {
        Node *tmp = head;
        head = head->next;
        free(tmp);
    }
}

// 字符串转大整数
BigInt str_to_bigint(const char *str) {
    BigInt num = {1, NULL};    
    if (*str == '-') {
        num.sign = -1;
        str++;
    }

    // 跳过前导零
    while (*str == '0') str++;
}

int main() {

}
